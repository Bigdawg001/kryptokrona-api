name: Kryptokrona API Main Pipeline

env:
  GITHUB_REGISTRY: "ghcr.io"
  GITHUB_OWNER: "kryptokrona"
  GITHUB_DOCKER_IMAGE: "kryptokrona-api"

on:
  push:
    branches:
      - master

jobs:
  assemble:
    name: Assemble
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up OpenJDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Assemble
        run: ./gradlew assemble

      - name: Upload Build Directory Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-dir
          path: ./build

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: [ assemble ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up OpenJDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # perhaps run liquibase migrations here too and setup a postgresql database

      - name: Temporarily
        run: echo "hello"

#      - name: Checking Style
#        run: ./gradlew checkstyleMain
#
#      - name: Checking Duplicated Code
#        run: ./gradlew cpdCheck
#
#      - name: Checking Bugs
#        run: ./gradlew spotbugsMain
#
#      - name: Checking Code Standard
#        run: ./gradlew pmdMain

  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: [ assemble ]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: kryptokrona_api_dev
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: test1234
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - name: Set up OpenJDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Run Liquibase Migrations to H2 file
        run: ./gradlew update -PdbEnv=dev

      - name: Run Unit Test
        run: ./gradlew test

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [ assemble ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up OpenJDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # perhaps run liquibase migrations here too and setup a postgresql database

      - name: Run Code Coverage
        run: echo "Hello"

  docker:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest
    needs: [ static-code-analysis, unit-test, code-coverage ]
    steps:
      - uses: actions/checkout@v2
      - uses: benjlevesque/short-sha@v1.2

      - name: Log into registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Download Build Directory
        uses: actions/download-artifact@v3
        with:
          name: build-dir
          path: ./build

      - name: Build Docker
        run: |
          docker build -t $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} . --no-cache

      - name: Tag Image
        run: |
          docker tag $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }} $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:latest

      - name: Publish Docker to GitHub Repository
        run: |
          docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:${{ env.SHA }}
          docker push $GITHUB_REGISTRY/$GITHUB_OWNER/$GITHUB_DOCKER_IMAGE:latest

#  staging-deploy:
#    name: Deploy Staging
#    runs-on: ubuntu-latest
#    needs: docker
#
#    steps:
#      - name: Check out the codebase.
#        uses: actions/checkout@v2
#
#      - name: Run playbook
#        uses: dawidd6/action-ansible-playbook@v2
#        with:
#          playbook: provision_vps.yml
#          directory: ./ansible
#          key: ${{secrets.ANSIBLE_PRIVATE_KEY}}
#          vault_password: ${{secrets.ANSIBLE_VAULT_PASS}}
#          options: |
#            --inventory staging.inventory
#            --verbose
#
#  smoke-test-staging:
#    name: Smoke Test Staging
#    runs-on: ubuntu-latest
#    needs: [ staging-deploy ]
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Uses Python 3.11
#        uses: actions/setup-python@v3
#        with:
#          python-version: '3.11.0-alpha.1'
#
#      - name: Smoke Test
#        run: |
#          pip3 install requests
#          python3 scripts/tests/kryptokrona-api/smoke-test.py test-api.mjovanc.com
#
#  deploy-prod:
#    name: Deploy Prod
#    runs-on: ubuntu-latest
#    needs: [ smoke-test-staging ]
#
#    steps:
#      - name: Check out the codebase.
#        uses: actions/checkout@v2
#
#      - name: Run playbook
#        uses: dawidd6/action-ansible-playbook@v2
#        with:
#          playbook: provision_vps.yml
#          directory: ./ansible
#          key: ${{secrets.ANSIBLE_PRIVATE_KEY}}
#          vault_password: ${{secrets.ANSIBLE_VAULT_PASS}}
#          options: |
#            --inventory prod.inventory
#            --verbose
#
#  smoke-test-prod:
#    name: Smoke Test Prod
#    runs-on: ubuntu-latest
#    needs: [ deploy-prod ]
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Uses Python 3.11
#        uses: actions/setup-python@v3
#        with:
#          python-version: '3.11.0-alpha.1'
#
#      - name: Smoke Test
#        run: |
#          pip3 install requests
#          python3 scripts/tests/kryptokrona-api/smoke-test.py api.mjovanc.com